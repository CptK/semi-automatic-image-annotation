[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "annotator"
version = "0.1.0"
description = "A semi-automatic image annotator using a YOLO model"
readme = "README.md"
authors = [
    { name = "Marcus Kornmann", email = "marcus.kornmann@stud.tu-darmstadt.de" }
]
license = { file = "LICENSE" }
dependencies = [
    "numpy",
    "pandas",
    "customtkinter",
    "Pillow",
    "pyyaml",
    "ruff"
]

[tool.black]
line-length = 110
target-version = [
    "py311",
]

[tool.ruff]
lint.select = ["E", "F", "W", "I", "N", "UP"]

# Same as Black
line-length = 110

# The lowest supported version
target-version = "py311"

# GitLab CI code quality report
output-format = "grouped"

[tool.ruff.lint.pep8-naming]
ignore-names = [
    "setUp",
    "tearDown",
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_",
    "up",
    "x",
    "y",
    "z",
    "Jf"
]

[tool.pytest.ini_options]
addopts = "-v --color=yes --cov=pyrate --doctest-modules"
junit_family = "xunit2"
testpaths = [
    # for the doctests:
    "pyrate",
    # for the actual tests:
    "tests"
]
doctest_optionflags = [
    "IGNORE_EXCEPTION_DETAIL",
    "DONT_ACCEPT_TRUE_FOR_1"
]
filterwarnings = [
    "error",
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
    "ignore:The height, width, and precision:rasterio.errors.RasterioDeprecationWarning",  # See https://github.com/rasterio/rasterio/issues/2466
]

[tool.coverage.run]
concurrency = ["multiprocessing"]
branch = true

[tool.coverage.report]
fail_under = 95.00
precision = 2
show_missing = true
exclude_lines = [
    # Regexes for lines to exclude from consideration

    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # It's okay to not cover unimplemented comparison methods
    "return NotImplemented"
]


[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
plugins = [
    "numpy.typing.mypy_plugin"
]

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "matplotlib.*",
    "yaml.*",
    "PIL.*",
    "customtkinter.*",
    "ultralytics.*",
]
ignore_missing_imports = true
